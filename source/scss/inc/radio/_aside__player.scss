.player {
	@include flexbox(auto, center, auto, auto);
	$elemHeight: 50px;
	padding: 0;

	user-select: none;

	& > * {
		@include flexbox(auto, center, center, auto);
		height: $elemHeight;
	}

	&.only-one {
		.player-controls {
			width: 100%;

			[data-action='changeVolume'] { width: 100% }
			.on-mobile { width: auto }
		}

		.player-change { display: none }
	}

	&.mayday { display: none }

	&-controls {
		font-size: 0;

		[data-action='changePlayerState'] {
			height: 100%; width: $elemHeight;
			position: relative;
			border-right: 1px solid rgba(#000, .1);
			outline: 0;

			@include transition(.3s);

			/*
			 * Фича взята с github.com/daniel-j/parasprite-radio
			 */

			&:before {
				position: absolute;
				content: '';
				left: 12.5px;
			}

			&[data-state='stop']:before,
			&[data-state='loading']:before {
				top: 10px;
				border: 0 solid transparent;
				border-width: 15px 25px;
				border-left-color: var(--prime-color-10d);
			}

			&[data-state='loading'] {
				animation: loading-anim 1s infinite;
				cursor: wait;
			}

			&[data-state='play']:before {
				background-color: var(--prime-color-10d);
				width: 25px; height: 25px;
				top: 12.5px;
			}

			&:hover {
				opacity: .8;
			}
		}

		[data-action='changeVolume'] {
			$elemHeight: 15px;
			cursor: pointer;
			background-color: transparent;
			width: 100px; height: $elemHeight;
			margin: 0 10px;
			border: 1px solid rgba(#000, .1);

			@each $browser, $track, $range in (webkit, 'slider-runnable', slider), (moz, range, range) {
				-#{$browser}-appearance: none;

				&::-#{$browser}-#{$track}-track {
					height: 100%;
					background-image: linear-gradient(to right,
						var(--prime-color-10d) 0%,
						var(--prime-color-10d) var(--volume),
						var(--pe-bckg-color) var(--volume),
						var(--pe-bckg-color) 100%);
				}

				&::-#{$browser}-#{$range}-thumb {
					$btn-color: #fff;
					-#{$browser}-appearance: none;
					width: 10px; height: #{$elemHeight + 10px};
					margin-top: #{10px / 2 * -1};
					background-color: $btn-color;
					border: 1px solid #999;
					cursor: pointer;
					border-radius: 0;

					@include transition(.2s);

					&:hover {
						background-color: darken($btn-color, 5%);
					}

					&:active {
						background-color: darken($btn-color, 10%);
						transform: scale(1.1);
					}
				}
			}
		}

		&.on-mobile {
			[data-action='changePlayerState'] {
				border-right: 0;
			}

			[data-action='changeVolume'] {
				display: none;
			}
		}
	}

	&-change {
		margin-left: 10px;

		ul {
			width: 100%;
			font-size: 0;

			li {
				display: inline-block;
				width: 50px;
				height: 30px;

				list-style: none;

				margin: 0 10px;

				&:first-child { margin-right: 2.5px }
				&:last-child { margin-left: 2.5px }
				// &:not(:first-child):not(:last-child) { margin: 0 7.5px }
			}
		}

		button {
			width: 100%; height: 100%;
			background-color: transparent;
			font-size: #{$fontSize * .8};
			border: 1px solid rgba(#000, .3);
			outline: 0;
			text-transform: uppercase;
			cursor: pointer;

			@include transition(.3s);

			&:focus {
				background-color: rgba(#000, .05);
			}

			&.active {
				background-color: rgba(#000, .15);
			}

			&:not(.active):hover {
				background-color: rgba(#000, .1);
			}

			&[disabled] {
				opacity: .8;
				cursor: not-allowed;
			}
		}
	}
}
